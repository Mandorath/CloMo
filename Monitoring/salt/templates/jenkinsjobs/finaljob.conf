def BUILDAWS = true
def PREPAREREPO = true
def PUBLISHREPO = true
def CLEANUP = false

def AWS_ACCESS_KEY_ID = "<AWS_KEY>"
def AWS_SECRET_ACCESS_KEY = "<AWS_SECRET>"
def RUN = "experiment-0"
def NEW_RUN = "experiment-0"
def EMAIL = "<account_email>"
def NAME = "<account name>"
def GITHUB = "<github_repo>"
def GITLAB = "<gitlab_repo>"
def BITBUCKET = "<bitbucket_repo>"
def SOURCEFORGE = "<sourceforge_repo>"


pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY    = "${AWS_SECRET_ACCESS_KEY}"
        RUN = "${RUN}"
        NEW_RUN = "${NEW_RUN}"
        NAME = "${NAME}"
        EMAIL = "${EMAIL}"
        GITHUB = "${GITHUB}"
        GITLAB = "${GITLAB}"
        BITBUKET = "${BITBUCKET}"
        SOURCEFORGE = "${SOURCEFORGE}"
    }

    stages {
        stage('Build AWS Environment') {
            when {
              expression { BUILDAWS == true }
            }
            steps {
                dir('mainAWS') {
                     checkout([
                                $class: 'GitSCM',
                                branches: [[name: 'refs/heads/master']],
                                doGenerateSubmoduleConfigurations: false,
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: '<private_repo>']]
                            ])
                }
                sh "ls -lat"
                sh "cd mainAWS/terraform_vms/ && terraform init"
                sh "cd mainAWS/terraform_vms/ && terraform plan"
                sh "cd mainAWS/terraform_vms/ && terraform apply -auto-approve"
            }
        }
        stage('Configure VMs') {
            steps {
                sshagent(['jenkins-ssh'])
                {
                    sh "ssh -l maurice saltmaster01 sudo salt-key -L"
                }
                sshagent(['jenkins-ssh'])
                {
                    sh 'ssh -l <user> monitor01 sudo sed -i "s|${RUN}|${NEW_RUN}|g" /etc/logstash/conf.d/02-filters.conf'
                    sh 'ssh -l <user> sudo systemctl restart logstash'
                }

            }
        }
        stage('Prepare repos') {
            when {
              expression { PREPAREREPO == true }
            }
            steps {
                dir('tempAWS') {
                     checkout([
                                $class: 'GitSCM',
                                branches: [[name: 'refs/heads/master']],
                                doGenerateSubmoduleConfigurations: false,
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: 'git@versioner.of.worlds.com:mouw/rp_aws_dum.git']]
                            ])
                }
                dir('githubAWS') {
                    checkout([
                                $class: 'GitSCM',
                                branches: [[name: 'refs/heads/main']],
                                doGenerateSubmoduleConfigurations: false,
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: "${GITHUB}"]]
                            ])
                    sh "git checkout -B main"
                    sh "ls -lat"
                    sh "cp -r ../tempAWS/* ./"
                }
                dir('gitlabAWS') {
                    checkout([
                                $class: 'GitSCM',
                                branches: [[name: 'refs/heads/master']],
                                doGenerateSubmoduleConfigurations: false,
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: "${GITLAB}"]]
                            ])
                    sh "git checkout -B master"
                    sh "cp -r ../tempAWS/* ./"
                    sh "ls -lat"
                }
                dir('bitbAWS') {
                    checkout([
                                $class: 'GitSCM',
                                branches: [[name: 'refs/heads/master']],
                                doGenerateSubmoduleConfigurations: false,
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: "${BITBUCKET}"]]
                            ])
                    sh "ls -lat"
                    sh "git checkout -B master"
                    sh "cp -r ../tempAWS/* ./"
                }
                dir('sourcefAWS') {
                    checkout([
                                $class: 'GitSCM',
                                branches: [[name: 'refs/heads/master']],
                                doGenerateSubmoduleConfigurations: false,
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'jenkins-ssh', url: "${SOURCEFORGE}"]]
                            ])
                    sh "ls -lat"
                    sh "git checkout -B master"
                    sh "cp -r ../tempAWS/* ./"
                }
                dir('mainAWS') {
                    sh "chmod +x replace_variables.sh"
                    sh "./replace_variables.sh github ../githubAWS/terraform"
                    sh "./replace_variables.sh gitlab ../gitlabAWS/terraform"
                    sh "./replace_variables.sh bitbucket ../bitbAWS/terraform"
                    sh "./replace_variables.sh sourceforge ../sourcefAWS/terraform"
                }
            }
        }
        stage('Publish repos') {
            when {
              expression { PUBLISHREPO == true }
            }
            steps {
                dir('githubAWS') {
                    sh "git add *"
                    sh "git config --global user.email '${EMAIL}'"
                    sh "git config --global user.name '${NAME}'"
                    sh "git commit -m '${RUN}'"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin main")
                    }
                }
                dir('gitlabAWS') {
                    sh "git add *"
                    sh "git config --global user.email '${EMAIL}'"
                    sh "git config --global user.name '${NAME}'"
                    sh "git commit -m '${RUN}'"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin master")
                    }
                }
                dir('bitbAWS') {
                    sh "ls -lat"
                    sh "git add *"
                    sh "git config --global user.email '${EMAIL}'"
                    sh "git config --global user.name '${NAME}'"
                    sh "git commit -m '${RUN}'"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin master")
                    }
                }
                dir('sourcefAWS') {
                    sh "ls -lat"
                    sh "git add *"
                    sh "git config --global user.email '${EMAIL}'"
                    sh "git config --global user.name '${NAME}'"
                    sh "git commit -m '${RUN}'"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin master")
                    }
                }
            }
        }
        stage('Cleanup') {
            when {
              expression { CLEANUP == true }
            }
            steps {
                dir('githubAWS') {
                    sh "git reset --hard HEAD~1"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin main -f")
                    }
                }
                dir('gitlabAWS') {
                    sh "git reset --hard HEAD~1"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin master -f")
                    }
                }
                dir('bitbAWS') {
                    sh "git reset --hard HEAD~1"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin master -f")
                    }
                }
                dir('sourcefAWS') {
                    sh "git reset --hard HEAD~1"
                    sshagent(['jenkins-ssh'])
                    {
                        sh("git push --set-upstream origin master -f")
                    }
                }
                sh "cd mainAWS/terraform_vms/ && terraform destroy -auto-approve"
                sshagent(['jenkins-ssh'])
                {
                    sh "ssh -l <user> saltmaster01 sudo salt-key -y -d <hm-m1>"
                    sh "ssh -l <user> saltmaster01 sudo salt-key -y -d <hm-m1>"
                    sh "ssh -l <user> saltmaster01 sudo salt-key -y -d <hm-m1>"
                    sh "ssh -l <user> saltmaster01 sudo salt-key -y -d <hm-m1>"
                }
            }
        }
    }
}
